# Usage tips:
# - working on something, and need that to be built first? Temporarily, insert
#   a stage before the others.
# - to make gitlab skip jobs, prepend its name with . (a dot).
# - don't forget the dependencies: [] setting. It fixes artifacts being passed
#   on from one stage to the next. See note for more info:
#   https://gitlab.com/gitlab-org/gitlab-ce/issues/3423#note_4714661
# - gitlab: don't forget to set the builds option to clone instead of git fetch
#   see Project Settings -> Builds. Fixes issues new builds not being 100%
#   clean builds.
# - In Project Settings you can also increase the max build time, default 60
#   minutes, to, for example, 180 minutes. 

stages:
  - build-danny-ccgx-full
  - build-venus-ccgx-swu
  - build-jethro-full
  - build-packages
  - build-danny-ccgx-opensource
  - build-sdk

build-danny-ccgx-full:
  script:
    - make CONFIG=danny reconf fetch-all ccgx install
  stage: build-danny-ccgx-full
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/venus/images
    - install/*.zip
  dependencies: []

build-venus-ccgx-swu:
  script:
    - make CONFIG=danny reconf fetch-all build/conf/bblayers.conf
    - ./ci-build-venus-ccgx-swu.sh
  stage: build-venus-ccgx-swu
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/venus/images/ccgx/venus-upgrade-image-ccgx.zip
  dependencies: []

build-jethro-full:
  script:
    - make CONFIG=jethro reconf fetch-all && make venus-images
  stage: build-jethro-full
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/venus/images
  dependencies: []

build-danny-ccgx-opensource:
  # This stage could be build immediately after the full version, saves time.
  # But that changes things too, the private metas will still be applied.
  # Therefore we do a clean build, making sure that John Doe on the internet
  # can build the image from scratch, and that the result is the same.
  script:
    - make CONFIG=danny fetch ccgx-venus-image
    - rm deploy/venus/images/ccgx/*.ubifs
  stage: build-danny-ccgx-opensource
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/venus/images
  dependencies: []

build-raspbian-wheezy:
  script:
    - ./build-raspbian-debs.sh wheezy
    - ./sync-deploy-to-build-feeds.sh
  stage: build-packages
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/raspbian-wheezy/reprepro
  dependencies: []
  when: always

build-raspbian-jessie:
  script:
    - ./build-raspbian-debs.sh jessie
    - ./sync-deploy-to-build-feeds.sh
  stage: build-packages
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/raspbian-jessie/reprepro
  dependencies: []
  when: always

build-debian-jessie:
  script:
    - ./build-debian-debs.sh
    - ./sync-deploy-to-build-feeds.sh
  stage: build-packages
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/debian-jessie/reprepro
  dependencies: []
  when: always

build-sdk-danny:
  script:
    - make CONFIG=danny fetch sdk
  stage: build-sdk
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/venus/sdk
  dependencies: []
  when: always

build-sdk-jethro:
  script:
    - export MACHINE=beaglebone && make CONFIG=jethro fetch sdk
  stage: build-sdk
  tags:
    - venus
    - linux
  artifacts:
    paths:
    - deploy/venus/sdk
  dependencies: []
  when: always
